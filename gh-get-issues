#!/usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use JSON;
use LWP::UserAgent;
use LWP::Protocol::https;
use Term::ANSIColor;

my $json = JSON->new()->allow_nonref();

my $noisy = 1;
if(@ARGV && shift() eq '--quiet') { $noisy-- }

my $github_ua   = LWP::UserAgent->new();
my $github_auth = $ENV{GH_AUTH} ||
    die(colored(['red'], "You need to set GH_AUTH\n"));
my $next_url    = "https://$github_auth\@api.github.com/users/DrHyde/repos";

my $issues = {};

sub get_with_retries {
    my($ua, $req, $tries) = @_;
    my $sleep_length = 30;
    my $this_try = 0;
    my $res;
    while($this_try++ < $tries) {
        $res = $ua->request($req);
        if($res->is_success) {
            return $res
        }
        warn("  ... retrying (retry $this_try)\n") if($noisy);
        sleep $sleep_length;
        $sleep_length += 30;
    }
    die(
        "Couldn't fetch.\n\n".
        Dumper($req).
        Dumper($res)
    );
}

while($next_url) {
    my $github_req = HTTP::Request->new(GET => $next_url);
    warn "  fetching $next_url\n" if($noisy);
    my $github_res = get_with_retries($github_ua, $github_req, 3);

    if($github_res->header('Link') =~ /<([^>]+)>;\s+rel="next"/) {
        $next_url = $1;
        $next_url =~ s/(https?:\/\/)/$1$github_auth\@/;
    } else {
        $next_url = '';
    }

    my $repos = $json->decode($github_res->content());
    foreach my $repo (@{$repos}) {
        my $repo_name = $repo->{name};
        my $this_repo = $issues->{$repo_name} = [];

        (my $public_name = $repo_name) =~ s/perl-modules-//;
        my $push_time = $repo->{pushed_at};

        my $issues_url = $repo->{url}.'/issues?state=all';
    ISSUESPAGE:
        $issues_url =~ s/(https?:\/\/)/$1$github_auth\@/;
        $github_req = HTTP::Request->new(GET => $issues_url);
        warn "  fetching $issues_url\n" if($noisy);
        my $github_res = get_with_retries($github_ua, $github_req, 3);
        foreach my $issue (@{$json->decode($github_res->content())}) {
            my $issue_url = $issue->{url};
            if($issue->{user}->{login} eq 'dependabot[bot]') {
                warn "  NOT fetching $issue_url: dependabot\n" if($noisy);
                next;
            }
            $issue_url =~ s/(https?:\/\/)/$1$github_auth\@/;
            $github_req = HTTP::Request->new(GET => $issue_url);
            warn "  fetching $issue_url\n" if($noisy);
            my $github_issue_res = get_with_retries($github_ua, $github_req, 3);

            my $comments_url = $issue->{comments_url};
            my @this_issue_comments;
        COMMENTSPAGE:
            $comments_url =~ s/(https?:\/\/)/$1$github_auth\@/;
            $github_req = HTTP::Request->new(GET => $comments_url);
            warn "  fetching $comments_url\n" if($noisy);
            my $github_comments_res = get_with_retries($github_ua, $github_req, 3);
            push  @this_issue_comments, @{$json->decode($github_comments_res->content())};
            if($github_comments_res->header('Link') && $github_comments_res->header('Link') =~ /<([^>]+)>;\s+rel="next"/) {
                $comments_url = $1;
                goto COMMENTSPAGE;
            }

            push @{$this_repo}, {
                issue    => $json->decode($github_issue_res->content()),
                comments => \@this_issue_comments
            };
        }

        if($github_res->header('Link') && $github_res->header('Link') =~ /<([^>]+)>;\s+rel="next"/) {
            $issues_url = $1;
            goto ISSUESPAGE;
        }
    }
}

print JSON->new->ascii->encode($issues);
