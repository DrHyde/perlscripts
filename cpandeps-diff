#!/usr/bin/env perl

use 5.028;

use CPAN::FindDependencies;
use File::Find::Rule::Age;
use LWP::Simple;
use Text::Diff;

use feature 'signatures';
no warnings 'experimental::signatures';

# create the cache if needed
chdir($ENV{HOME});
mkdir('.cpandeps-diff');
mkdir('.cpandeps-diff/cache');

# clear out Ye Olde cache files. Max age is 23h so multiple runs within a
# day won't hammer servers, but a daily cron job will always be fresh
unlink(File::Find::Rule->file()->age(older => '23h')->in('.cpandeps-diff/cache'));

# fetch 02packages so that is cached across multiple invocations
getstore('http://www.cpan.org/modules/02packages.details.txt.gz', '.cpandeps-diff/cache/02packages.details.txt.gz') unless(-f '.cpandeps-diff/cache/02packages.details.txt.gz');

if(@ARGV) {
    while(my $arg = shift(@ARGV)) {
        if($arg eq 'add') {
            _add(shift(@ARGV));
        } elsif($arg =~ /^(rm|remove|delete)$/) {
            _remove(shift(@ARGV));
        } elsif($arg eq 'list') {
            _print_list();
        } elsif($arg eq 'help') {
            _print_help();
        } elsif($arg eq 'report') {
            _report(shift(@ARGV));
        } else {
            die("'$arg' isn't a valid argument.\n\n"._help());
        }
    }
} else {
    _report(_list());
}

sub _list {
    opendir(my $dir_fh, '.cpandeps-diff') || die("Couldn't read $ENV{HOME}/.cpandeps-diff: $!\n");
    return grep { -f ".cpandeps-diff/$_" } readdir($dir_fh);
}

sub _report (@modules) {
    foreach my $module (@modules) {
        my $current_deps  = _get_deps($module);
        my $previous_deps = do {
            open(my $fh, '<', ".cpandeps-diff/$module") || die("Couldn't read $ENV{HOME}/.cpandeps-diff/$module: $!\n");
            join('', <$fh>);
        };
        if($current_deps ne $previous_deps) {
            print "Differences found in dependencies for $module:\n";
            print diff(\$previous_deps, \$current_deps, { STYLE => 'Table' });
            open(my $fh, '>', ".cpandeps-diff/$module") || die("Couldn't write $ENV{HOME}/.cpandeps-diff/$module: $!\n");
            print $fh $current_deps;
        }
    }
}

sub _add ($module) {
    return if(grep { $_ eq $module } _list());

    open(my $fh, '>', ".cpandeps-diff/$module") || die("Couldn't write $ENV{HOME}/.cpandeps-diff/$module: $!\n");
    print $fh _get_deps($module);
}

sub _get_deps ($module) {
    (my $version = $^V) =~ s/^v//;
    my $deps = qx{ cpandeps $module perl $version cachedir .cpandeps-diff/cache 02packages .cpandeps-diff/cache/02packages.details.txt.gz };
    return join("\n", sort { $a cmp $b } map { s/^.*\(dist: ([^\)]+)\).*/$1/r  } grep { $_ !~ /^$module / }  split("\n", $deps));
}

sub _remove ($module) {
    die("'$module' isn't in the database.\n\n"._help()) unless(grep { $_ eq $module } _list());

    unlink(".cpandeps-diff/$module");
}

sub _print_list { print "$_\n" foreach (_list()); }
sub _print_help { print _help(); }
sub _help {
    return <<EOHELP
$0: generate reports when modules' dependencies get new releases

Usage: $0 [command \@args]

In the absence of any commands, generate a report about all known
modules. Otherwise ...

Commands:

    add \$module

        Add the named module to the list of modules we care about

    remove \$module
    delete \$module
    rm     \$module

        Stop reporting on this module

    list

        Show which modules we're going to report on

    report \$module

        Generate a report for just this one module

    help

        This!

EOHELP
}
